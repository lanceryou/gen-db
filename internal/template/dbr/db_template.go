package dbr

// 需要表名，字段信息（不定参），注入名，
var tmpl = `// Code generated by model. DO NOT EDIT.

package model

import (
	"github.com/gocraft/dbr"
	"github.com/lanceryou/micro/db"
)

type {{.LowTable}}Model interface {
	Insert(entity *{{.Table}}Entity) int64
}

type {{.Table}}Entity struct {
	{{range .TableFields}}{{.CamelField}} {{.FieldType}} {{$.Inject}}db:"{{.Field}}"{{$.Inject}}
	{{end}}
	updateInfo map[string]interface{}
}

const (
	table{{.Table}} = "{{.TableName}}"
)

type {{.LowTable}}Impl struct {
	Connection *db.Connection {{.Inject}}inject:"{{.ProvideName}}"{{.Inject}}
}

func (e *{{.Table}}Entity) set(k string, v interface{}) {
	if e.updateInfo == nil {
		e.updateInfo = map[string]interface{}{}
	}

	e.updateInfo[k] = v
}

{{range .TableFields}}
func (e *{{$.Table}}Entity) Set{{.CamelField}}(v interface{}) *{{$.Table}}Entity{
	e.set("{{.Field}}", v)
	return e
}
{{end}}
// 生成rows
var columns{{.Table}}Fields = []string {
{{range .TableFields}} 	"{{.Field}}",
{{end}}
}

type columns{{.Table}}Type struct {
{{range .TableFields}} 	{{.CamelField}} string
{{end}}
}

var columns{{.Table}} = columns{{.Table}}Type{
{{range .TableFields}} 	{{.CamelField}} : "{{.Field}}",
{{end}}
}

func (e *{{.LowTable}}Impl) Insert(entity *{{.Table}}Entity) int64 {
	session := e.Connection.NewSession()
	r, err := session.InsertInto(table{{.Table}}).
			Columns(columns{{.Table}}Fields...).
			Record(entity).Exec()
	if err != nil {
		panic(err)
	}
	n, err := r.RowsAffected()
	if err != nil {
		panic(err)
	}
	return n
}
`
